---
title: "Ottawa Tennis Data"
---

### Heat Predictions

Playing in the heat is tough, especially as players age. Do we need to adapt, or is there nothing to worry about? The City of Ottawa provides climate prediction data; this article tries to model some of the potential medium term effects.

### Ottawa Data Sets

NetCDF is a data format climate data, and has also been adopted in other fields, particularly in bioinformatics, and in other disciplines where large multidimensional arrays of data are generated. Unlike most data formats, NetCDF files contain metadata that describes what is contained in a file, such as the latitude and longitude layout of the grid, the names and units of variables in the data set, and "attributes" that describe things like missing value codes, or offsets and scale factors that may have been used to compress the data. NetCDF files are also *machine-independent* because can be transferred among servers and computers that are running different operating systems, without having to convert the files in some way. Originally developed for storing and distributing climate data, such as those generated by climate simulation or reanalysis models, the format and protocols can be used for other gridded data sets. NetCDF libraries are developed and maintained by Unidata <http://www.unidata.ucar.edu/software/netcdf/> and easy-to-use applications for producing simple visualizations of NetCDF files exist, such as Panoply, <http://www.giss.nasa.gov/tools/panoply/>.

There are two versions of netCDF; netCDF3, which is widely used, but has some size and performance limitations, and netCDF4, which supports larger data sets and includes additional capabilities like file compression.

R has the capability of reading and writing (and hence analyzing) netCDF files, using the **`ncdf`** and **`ncdf4`** packages provided by David Pierce, and through other packages like **`raster`**, **`metR1`**, and **`RNetCDF`**. The **`ncdf4.helpers`** and **`easyNCDF`** packages provide some additional tools.

Load the **`ncdf4`** package.

```         
# load the ncdf4 package
library(ncdf4)
```

The file is assumed to be a CF-compliant netCDF file, in which the three main spatiotemporal dimensions allear the the relative order of time (T-coordinate), height or depth (Z-coordinate), latitude (or Y-coordinate), and longitude (or X-coordinate). In this example, the file is a 3-D file with T, Y and X coordinates (month of the year, latitude, and longitude). First, set the values for some temporary variables. **`ncpath`** is the path to where the file was downloaded, **`ncname`** is the name of the netCDF file, while **`dname`** is the name of the variable that will be read in.

Open the NetCDF file

```         
# set path and filename
ncpath <- "./data/nc_files/"
ncname <- "cru10min30_tmp"  
ncfname <- paste(ncpath, ncname, ".nc", sep="")
dname <- "tmp"  # note: tmp means temperature (not temporary)
```

Open the NetCDF data set, and print some basic information. The **`print()`** function applied to the **`ncin`** object produces information similar to that produced by the command-line utility **`ncdump`**.

```         
# open a netCDF file
ncin <- nc_open(ncfname)
print(ncin)
```
